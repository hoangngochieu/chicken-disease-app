import streamlit as st
import torch
import numpy as np
import cv2
from PIL import Image
from torchvision import transforms
from collections import OrderedDict
from ultralytics import YOLO
import timm

# ƒê·ªãnh nghƒ©a c√°c bi·∫øn ƒë·ªïi ·∫£nh
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

# Load m√¥ h√¨nh YOLO v√† Xception
model_detect = YOLO('best.pt')
model_classify = timm.create_model('xception', pretrained=False, num_classes=4)
state_dict = torch.load('XceptionNet_chicken_disease.pt', map_location='cpu')

# X·ª≠ l√Ω state_dict
new_state_dict = OrderedDict()
for k, v in state_dict.items():
    name = k[7:] if k.startswith('module.') else k
    name = name.replace('fc.1', 'fc')
    new_state_dict[name] = v
model_classify.load_state_dict(new_state_dict, strict=False)

# Labels
labels = ['Coccidiosis', 'Healthy', 'New Castle Disease', 'Salmonella']

# Giao di·ªán ch√≠nh
st.set_page_config(
    page_title="Ph√°t hi·ªán b·ªánh qua ph√¢n g√†",
    page_icon="üêî",
    layout="wide"
)
st.sidebar.title("Menu")
st.sidebar.markdown("## üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
st.sidebar.markdown("""
1. T·∫£i l√™n ·∫£nh ph√¢n g√†.
2. Nh·∫•n **X·ª≠ l√Ω** ƒë·ªÉ ph√°t hi·ªán v√πng b·ªánh.
3. Xem k·∫øt qu·∫£ chi ti·∫øt.
""")

st.title("üì∏ Ph√°t hi·ªán b·ªánh qua ph√¢n g√†")
st.markdown(
    "### üîç ·ª®ng d·ª•ng s·ª≠ d·ª•ng YOLO v√† Xception ƒë·ªÉ ph√°t hi·ªán v√† ph√¢n lo·∫°i b·ªánh.")
st.markdown("---")

# **T√πy ch·ªçn t·∫£i ·∫£nh**
option = st.radio("Ch·ªçn c√°ch t·∫£i ·∫£nh:", options=[
                  "T·∫£i l√™n t·ª´ thi·∫øt b·ªã", "Ch·ª•p ·∫£nh b·∫±ng camera"])
image = None

if option == "T·∫£i l√™n t·ª´ thi·∫øt b·ªã":
    uploaded_file = st.file_uploader(
        "T·∫£i l√™n ·∫£nh (JPG, PNG, JPEG)", type=["jpg", "png", "jpeg"])
    if uploaded_file:
        image = Image.open(uploaded_file).convert('RGB')
elif option == "Ch·ª•p ·∫£nh b·∫±ng camera":
    camera_file = st.camera_input("Ch·ª•p ·∫£nh b·∫±ng camera")
    if camera_file:
        image = Image.open(camera_file).convert('RGB')

# **X·ª≠ l√Ω khi c√≥ ·∫£nh**
if image is not None:
    st.subheader("·∫¢nh ƒë·∫ßu v√†o")
    st.image(image, caption="·∫¢nh ƒë√£ ch·ªçn", use_column_width=True)

    if st.button("X·ª≠ l√Ω ·∫£nh"):
        try:
            # D·ª± ƒëo√°n v√πng ph√°t hi·ªán b·ªánh
            results = model_detect(image)
            if len(results[0].boxes) > 0:
                xmin, ymin, xmax, ymax = results[0].boxes.xyxy[0].cpu().numpy()
                img_crop = image.crop((xmin, ymin, xmax, ymax))

                # Chu·∫©n b·ªã ·∫£nh cho ph√¢n lo·∫°i
                img_tensor = transform(img_crop).unsqueeze(0)
                model_classify.eval()
                with torch.no_grad():
                    predict = model_classify(img_tensor)
                    predicted_label = labels[torch.argmax(predict).item()]

                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                st.subheader("K·∫øt qu·∫£ ph√¢n lo·∫°i")
                col1, col2 = st.columns(2)
                with col1:
                    st.image(img_crop, caption="Khu v·ª±c ph√°t hi·ªán",
                             use_column_width=True)
                with col2:
                    st.success(f"Lo·∫°i b·ªánh: **{predicted_label}**")

                # V·∫Ω khoanh v√πng tr√™n ·∫£nh g·ªëc
                image_np = np.array(image)
                image_np = cv2.rectangle(image_np, (int(xmin), int(ymin)),
                                         (int(xmax), int(ymax)), (0, 255, 0), 2)
                image_np = cv2.putText(image_np, predicted_label, (int(xmin), int(ymin) - 10),
                                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

                st.image(image_np, caption="·∫¢nh v·ªõi v√πng khoanh b·ªánh",
                         use_column_width=True)
            else:
                st.warning("Kh√¥ng ph√°t hi·ªán v√πng b·ªánh n√†o trong ·∫£nh.")
        except Exception as e:
            st.error(f"L·ªói x·ª≠ l√Ω: {e}")
else:
    st.info("Vui l√≤ng ch·ªçn ho·∫∑c ch·ª•p ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

# Footer
st.sidebar.markdown("---")
st.sidebar.markdown("**Li√™n h·ªá h·ªó tr·ª£:** contact@nguyenhoangkhang.com")
